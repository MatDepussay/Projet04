"""
demo.py

Script de d√©monstration pour la mod√©lisation, l'analyse et l'optimisation d'un r√©seau hydraulique.

Ce programme effectue plusieurs op√©rations sur un r√©seau de distribution d‚Äôeau entre des sources et des villes,
en passant par des noeuds interm√©diaires, √† l‚Äôaide d‚Äôalgorithmes de flot maximal et d‚Äôoptimisation incr√©mentale.

Fonctionnalit√©s principales :
----------------------------
1. D√©finition d‚Äôun r√©seau hydraulique avec des noeuds (sources, villes, interm√©diaires) et des liaisons (canalisations).
2. Calcul du flot maximal initial dans le r√©seau.
3. Optimisation cibl√©e de certaines liaisons pour augmenter le flot.
4. Comparaison visuelle du r√©seau avant et apr√®s optimisation.
5. Tentative de satisfaction totale des besoins en eau des villes (100 % de la demande).
6. Affichage des liaisons satur√©es (utilis√©es √† capacit√© maximale).
7. V√©rification par assertion que l‚Äôobjectif est bien atteint.
8. Sauvegarde d‚Äôune figure du r√©seau final optimis√©.
9. Simulation d‚Äôun objectif irr√©aliste pour illustrer les limites du syst√®me.

Modules requis :
----------------
- `matplotlib.pyplot` : pour la visualisation.
- `copy` : pour la duplication profonde des objets.
- `data` : contient les classes `Noeud`, `Liaison`, `ReseauHydraulique` ainsi que les fonctions `optimiser_liaisons` et `satisfaction`.
- `affichage` : contient la fonction `afficherCarte`.

Auteurs :
---------
Ce script est g√©n√©ralement utilis√© √† des fins p√©dagogiques pour illustrer :
- Les algorithmes de flot maximal.
- L'optimisation incr√©mentale de capacit√©s de transport.
- La visualisation de graphes orient√©s pond√©r√©s.

Utilisation :
-------------
Ex√©cuter directement ce script depuis un environnement compatible avec l'affichage graphique (Jupyter, terminal avec interface graphique, etc.) :

    python demo.py

R√©sultats :
-----------
Le script affiche plusieurs visualisations du r√©seau et imprime les informations de flot et d‚Äôoptimisation dans la console.
Une figure est √©galement sauvegard√©e (`reseau_satisfaction_finale.png`).

"""

import sys
import os
import matplotlib.pyplot as plt
import copy

# üìÅ Ajout du chemin vers le dossier 'src' pour importer les modules du projet
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src')))

from data import Noeud, Liaison, ReseauHydraulique, optimiser_liaisons, satisfaction
from affichage import afficherCarte, afficherCarteEnoncer

# === √âtape 1 : D√©finition des noeuds et liaisons ===

ListeNoeuds = [
    Noeud("A", "source", 15),
    Noeud("B", "source", 15),
    Noeud("C", "source", 15),
    Noeud("D", "source", 10),
    Noeud("E", "intermediaire"),
    Noeud("F", "intermediaire"),
    Noeud("G", "intermediaire"),
    Noeud("H", "intermediaire"),
    Noeud("I", "intermediaire"),
    Noeud("J", "ville", 15),
    Noeud("K", "ville", 20),
    Noeud("L", "ville", 15),
]

ListeLiaisons = [
    Liaison("A", "E", 7),
    Liaison("B", "F", 10),
    Liaison("B", "G", 7),
    Liaison("C", "A", 5),
    Liaison("C", "F", 5),
    Liaison("D", "G", 10),
    Liaison("E", "F", 5),
    Liaison("E", "H", 4),
    Liaison("E", "I", 15),
    Liaison("F", "G", 5),
    Liaison("F", "I", 15),
    Liaison("G", "I", 15),
    Liaison("H", "J", 7),
    Liaison("I", "K", 30),
    Liaison("I", "L", 4),
    Liaison("K", "J", 10),
]

# === √âtape 2 : Cr√©ation du r√©seau hydraulique ===

reseau_demo = ReseauHydraulique(ListeNoeuds, ListeLiaisons)
result, index_noeuds = reseau_demo.calculerFlotMaximal()

print(f"Flot maximal initial : {result.flow_value} unit√©s")
fig = afficherCarteEnoncer(result=result,
                    noeuds=ListeNoeuds,
                    liaisons=ListeLiaisons)
plt.show()

# === √âtape 3 : Optimisation cibl√©e de liaisons ===

liaisons_a_optimiser = [("A", "E"), ("I", "L")]
print("\n--- Optimisation des liaisons B->F et E->I ---")

liaisons_copie = copy.deepcopy(ListeLiaisons)
config_finale, travaux = optimiser_liaisons(ListeNoeuds, liaisons_copie, liaisons_a_optimiser)

for i, (liaison, capacite, flot) in enumerate(travaux):
    u, v = liaison
    print(f"Travaux #{i+1}: Liaison {u} -> {v}, capacit√© choisie : {capacite}, nouveau flot maximal : {flot}")

# Affichage apr√®s optimisation
reseau_opt = ReseauHydraulique(ListeNoeuds, config_finale)
result_opt, index_noeuds_opt = reseau_opt.calculerFlotMaximal()

print(f"Flot maximal apr√®s optimisation : {result_opt.flow_value} unit√©s")

# === √âtape 4 : Visualisation comparative ===
fig1 = afficherCarte(
    result=result,
    index_noeuds=index_noeuds,
    noeuds=ListeNoeuds,
    liaisons=ListeLiaisons,
    montrer_saturees=True
)
fig1.suptitle("Avant optimisation", y=0.7)
plt.show()

fig2 = afficherCarte(
    result=result_opt,
    index_noeuds=index_noeuds_opt,
    noeuds=ListeNoeuds,
    liaisons=config_finale,
    montrer_saturees=True
)
fig2.suptitle("Apr√®s optimisation",y=0.7)

plt.show()

# === √âtape 5 : Satisfaction √† 100% des villes ===

# === Objectif : satisfaire toutes les villes ===
objectif = sum(noeud.capaciteMax for noeud in ListeNoeuds if noeud.type == "ville")

# === Appel √† la fonction satisfaction ===
nouvelle_config, travaux = satisfaction(
    noeuds=ListeNoeuds,
    liaisons=ListeLiaisons,
    optimiser_fonction=optimiser_liaisons,
    objectif=objectif,
    cap_max=25,
    max_travaux=5
)

# === R√©sultat final ===
reseau_final = ReseauHydraulique(ListeNoeuds, nouvelle_config)
resultat_final, index_noeuds = reseau_final.calculerFlotMaximal()

# === Affichage des r√©sultats ===
print(f"\nFlot final obtenu : {resultat_final.flow_value} / {objectif}\n")
print("‚úÖ Travaux r√©alis√©s :")
for (u, v), cap, flot in travaux:
    print(f"  - Liaison {u} ‚ûù {v} port√©e √† {cap} unit√©s, nouveau flot = {flot}")

# === Visualisation satisfaction des villes  ===
fig = afficherCarte(resultat_final,
                    index_noeuds=index_noeuds,
                    noeuds=ListeNoeuds,
                    liaisons=nouvelle_config,
                    montrer_saturees=True)
plt.title("R√©seau apr√®s satisfaction des villes")
plt.show()

# === √âtape 6 : Affichage final + liaisons satur√©es ===

# Affichage manuel des liaisons satur√©es (en plus de l'affichage graphique)
# ‚úÖ Affichage manuel des liaisons satur√©es
print("\nüî¥ Liaisons satur√©es apr√®s satisfaction :")
reseau_satis = ReseauHydraulique(ListeNoeuds, nouvelle_config)
result_satis, index_noeuds_satis = reseau_satis.calculerFlotMaximal()
for u, v, cap in reseau_satis.liaisons_saturees(result_satis):
    flow = result_satis.flow[reseau_satis.index_noeuds[u], reseau_satis.index_noeuds[v]]
    print(f"{u} -> {v} : {flow} / {cap} (satur√©e)")

# === √âtape 7 : V√©rification par assertion ===

assert result_satis.flow_value >= objectif, "‚ö†Ô∏è Objectif non atteint : toutes les villes ne sont pas satisfaites"

# === √âtape 8 : Sauvegarde de la figure (facultatif) ===
plt.savefig("reseau_satisfaction_finale.png")
plt.show()

# === √âtape 9 : Simulation d‚Äôun cas irr√©aliste (bonus) ===

objectif_echec = 1000
print(f"\n--- Test avec un objectif irr√©aliste ({objectif_echec} unit√©s) ---")
_, travaux_impossibles = satisfaction(
    noeuds=ListeNoeuds,
    liaisons=ListeLiaisons,
    optimiser_fonction=optimiser_liaisons,
    objectif=objectif_echec
)
if travaux_impossibles:
    dernier_flot = travaux_impossibles[-1][2]
    print(f"Flot maximum atteint malgr√© les efforts : {dernier_flot} unit√©s (objectif non atteint)")
else:
    print("Aucun ajustement possible avec ce niveau d‚Äôobjectif.")